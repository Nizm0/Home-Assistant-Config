---
# The template sensor platform
#
# https://www.home-assistant.io/integrations/template
#
platform: template
sensors: #!include_dir_merge_named templates
  predicted_print_end_time:
    friendly_name: Ender 3 Predicted End Time
    value_template: >
      {% if is_state("binary_sensor.ender_3_printing", "on") and states("sensor.ender_3_time_remaining") > "0"  %}
        {{ (as_timestamp(now()) + states.sensor.ender_3_time_remaining.state | float) | timestamp_local }}
      {%- else -%}
        ---NAN---
      {%- endif %}
  battery_status:
    friendly_name: "Battery Status"
    entity_id:
    - input_boolean.battery_status_update
    value_template: >
      {%- set threshold = 20 -%}
      {%- set domains = ['light', 'switch', 'sensor', 'zwave', 'lock'] -%}
      {%- for domain in domains -%}
        {%- for item in states[domain] if ((item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) or ("battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown"))) -%}
          {%- if (item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) -%}
          {{ item.name }} ({{ item.attributes['battery_level'] }}){%- if not loop.last %}, {% endif -%}{% endif -%}
            {%- if "battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown") -%}
            {{ item.name }} ({{ item.state }}){%- if not loop.last %}, {% endif -%} {% endif -%}
        {%- endfor -%}
      {%- endfor -%}

  solar_angle:
    friendly_name: "Sun angle"
    unit_of_measurement: 'degrees'
    value_template: "{{ state_attr('sun.sun', 'elevation') }}"

  # vacuum_battery:
  #   entity_id: vacuum.rockrobo
  #   friendly_name: "Vacuum - Battery"
  #   value_template: "{{ states.vacuum.rockrobo.attributes.battery_level }}"
  #   device_class: battery
  #   unit_of_measurement: '%'

  # vacuum_main_brush:
  #   entity_id: vacuum.rockrobo
  #   friendly_name: "Vacuum - Main Brush left"
  #   value_template: "{{ states.vacuum.rockrobo.attributes.main_brush_left }}"
  #   # device_class: battery
  #   # unit_of_measurement: '%'

  # vacuum_side_brush:
  #   entity_id: vacuum.rockrobo
  #   friendly_name: "Vacuum - Side Brush left"
  #   value_template: "{{ states.vacuum.rockrobo.attributes.side_brush_left }}"
  #   # device_class: battery
  #   # unit_of_measurement: '%'

  # vacuum_filter:
  #   entity_id: vacuum.rockrobo
  #   friendly_name: "Vacuum - Filter left"
  #   value_template: "{{ states.vacuum.rockrobo.attributes.filter_left }}"
  #   # device_class: battery
  #   # unit_of_measurement: '%'

  # vacuum_sensors:
  #   entity_id: vacuum.rockrobo
  #   friendly_name: "Vacuum - Sensor dirty left"
  #   value_template: "{{ states.vacuum.rockrobo.attributes.sensor_dirty_left }}"
  #   # device_class: battery
  #   # unit_of_measurement: '%'

  in_bed_bayesian_probability:
    entity_id: binary_sensor.in_bed
    value_template: "{{states.binary_sensor.in_bed.attributes.probability * 100}}"
    unit_of_measurement: '%'

  template_last_motion:
    friendly_name: 'Last Motion'
    value_template: >
      {% set sensors = [states.binary_sensor.living_room_motion_sensor, states.binary_sensor.hallway_motion_sensor, states.binary_sensor.kitchen_motion_sensor, states.binary_sensor.bathroom_motion_sensor, states.binary_sensor.kids_motion_sensor, states.binary_sensor.bedroom_motion_sensor] %}
      {% for sensor in sensors %}
        {% if as_timestamp(sensor.last_changed) == as_timestamp(sensors | map(attribute='last_changed') | max) %}
          {{ sensor.name }}
        {% endif %}
      {% endfor %}

    # {% for state in states.binary_sensor if ('motion' in state.entity_id) and ('sensor' in state.entity_id.split('.')[1])-%}
    #   {{state.entity_id}}
    # {%- endfor %}
    
  # last_motionv2:
  #   friendly_name: Last motionv2
  #   value_template: '{% if states.group.motion_check.last_updated is undefined %}{{"00:00:00"}}{% else %}{{ ((as_timestamp(states.sensor.date_time.last_updated)-as_timestamp(states.group.motion_indoors.last_updated))|int) }}{% endif %}'
  #   entity_id:
  #     - sensor.date_time
  #   unit_of_measurement: 's'

  # motion_last30:
  #   value_template: '{{(as_timestamp(now())-as_timestamp(states.sensor.template_last_motion.last_changed)) < 1800 }}'
  #   friendly_name: Motion in Last 30min
    # device_class: motion

  # taking_bath:
  #   friendly_name: Taking bath
  #   # entity_id: semsor.taking_bath
  #   value_template: > 
  #     {% if states('sensor.bathroom_humidity') | float > states('sensor.average_house_humidity') | float +5 %}
  #       true
  #     {%- else -%}
  #       false
  #     {%- endif %}

  max_recorded_temp:
    friendly_name: Max recorded temperature
    device_class: temperature
    entity_id: sensor.max_temperature_in_home
    unit_of_measurement: 'Â°C'
    value_template: >
      {% if states.sensor.max_recorded_temp.state | float > states.sensor.max_temperature_in_home.state | float -%}
        {{states.sensor.max_recorded_temp.state | float}}
      {%- elif states.sensor.max_recorded_temp.state == 'unknown' -%}
        {{34.2}}
      {%- else -%}
        {{states.sensor.max_temperature_in_home.state | float}}
      {%- endif %}

# - platform: template
#   sensors:
#     bedroom_battery_level:
#       friendly_name: "Bedroom room batteries"
#       # entity_id: sensor.bedroom_temperature
#       unit_of_measurement: "%"
#       value_template: "{{states.sensor.bedroom_temperature.attributes.battery_level}}"
#       icon_template: '{% if states.binary_sensor.bedroom_temperature.attributes.battery_level == 100 %}
#                           mdi:battery
#                       {% elif states.binary_sensor.bedroom_temperature.attributes.battery_level >= 90 %}
#                           mdi:battery-90
#                       {% elif states.binary_sensor.bedroom_temperature.attributes.battery_level >= 80 %}
#                           mdi:battery-80
#                       {% elif states.binary_sensor.bedroom_temperature.attributes.battery_level >= 70 %}
#                           mdi:battery-70
#                       {% elif states.binary_sensor.bedroom_temperature.attributes.battery_level >= 60 %}
#                           mdi:battery-60
#                       {% elif states.binary_sensor.bedroom_temperature.attributes.battery_level >= 50 %}
#                           mdi:battery-50
#                       {% elif states.binary_sensor.bedroom_temperature.attributes.battery_level >= 40 %}
#                           mdi:battery-40
#                       {% elif states.binary_sensor.bedroom_temperature.attributes.battery_level >= 30 %}
#                           mdi:battery-30
#                       {% elif states.binary_sensor.bedroom_temperature.attributes.battery_level >= 20 %}
#                           mdi:battery-20
#                       {% elif states.binary_sensor.bedroom_temperature.attributes.battery_level >= 10 %}
#                           mdi:battery-10
#                       {% else %}
#                           mdi:battery-charging-wireless-outline
#                       {% endif %}'