#############################################
#                                           #
#                 BW-SHP5                   #
#                                           #
#############################################
substitutions:
  # Modify variables based on your settings
  hostname: 'bw_shp5_01'
  plug_name: BW SHP5 01
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Higher value gives lower watt readout 2020 model uses 0.00290 older uses 0.00117
  current_res: "0.00290"
  # Lower value gives lower voltage readout 2020 model uses 940 older uses 755
  voltage_div: "935"
  # Max Power is 3450W for 15A and 2300W for 10A
  max_power: "2300"
  # 2020 model uses GPIO4 for CF1 older use GPIO14
  cf1_pin: GPIO14
  reboot_time: 10min

esphome:
  name: ${hostname}
  platform: ESP8266
  board: esp8285
  on_boot:
    priority: -10
    # Turn on switch during startup
    then:
      - switch.turn_on: relay

wifi:
  ssid: $ssid
  password: $password
  fast_connect: on

# Enable logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  # password: "ABCD1234"
  reboot_timeout: 12h
web_server:
  port: 80

ota:
  # password: "ABCD1234"

# Sync time with Home Assistant
time:
  - platform: homeassistant
    id: homeassistant_time

# Text sensors with general information
text_sensor:
  # - platform: version
  #   name: ${plug_name} Version
  - platform: wifi_info
    ip_address:
      name: ${plug_name} Ip
    # ssid:
    #   name: ${plug_name} Ssid

uart:
  rx_pin: RX
  baud_rate: 4800

sensor:
  # Uptime sensor
  - platform: uptime
    name: ${plug_name} Uptime
  # WiFi Signal sensor
  - platform: wifi_signal
    name: ${plug_name} Wifi Signal
    update_interval: 30s
  # Power sensor
  - platform: hlw8012
    sel_pin:
      number: GPIO12
      inverted: true
    cf_pin: GPIO05
    cf1_pin: GPIO04
    current_resistor: ${current_res}
    voltage_divider: ${voltage_div}
    change_mode_every: 5
    update_interval: 5s
    # Current sensor
    current:
      name: ${device_name} Current
      icon: mdi:current-ac
      unit_of_measurement: A
      accuracy_decimals: 2
      filters:
        - delta: 0.02
        - multiply: 1.81
    # Voltage sensor
    voltage:
      name: ${device_name} Voltage
      icon: mdi:poll
      unit_of_measurement: V
      accuracy_decimals: 1
      filters:
        - delta: 0.5
    # Power sensor
    power:
      id: power
      name: ${device_name} Wattage
      icon: mdi:flash-outline
      unit_of_measurement: W
      accuracy_decimals: 0
      filters:
        - delta: 1.5
      on_value_range:
        - above: ${max_power}
          then:
            - light.turn_off: led
            - switch.turn_off: relay
            - homeassistant.service:
                service: persistent_notification.create
                data:
                  title: Message from ${plug_name}
                data_template:
                  message: Switch turned off because power exceeded ${max_power}W

  # Total daily energy sensor
  - platform: total_daily_energy
    name: ${plug_name} Total Daily Energy
    power_id: power
    unit_of_measurement: kWh
    device_class: energy
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    icon: mdi:clock-alert

  - platform: adc
    internal: true
    id: source_sensor
    pin: GPIO17
    accuracy_decimals: 1
    update_interval: 5s
    filters:
      delta: 0.4
    on_value:
      then:
        - if:
            condition:
            # Should return either true or false
              lambda: |-
                return id(source_sensor).state <= 0.3;
            # then:
            #   - switch.toggle: relay

binary_sensor:
  # Binary sensor for the button press
  - platform: gpio
    name: ${plug_name} Button
    pin:
      number: GPIO16
      inverted: true
    on_press:
      - switch.toggle: relay
    internal: true

switch:
  - platform: restart
    name: ${plug_name} Reboot
    id: hallway_lights_restart
  # Switch to toggle the relay (Power output)
  - platform: gpio
    id: relay
    # name: ${plug_name} Switch
    pin: GPIO14
    on_turn_on:
      - light.turn_on: led
    on_turn_off:
      - light.turn_off: led
    restore_mode: ALWAYS_ON
  - platform: template
    name: ${plug_name} Switch
    optimistic: true
    restore_state: true
    id: fakebutton
    turn_on_action:
      - switch.turn_on: relay
    turn_off_action:
      - switch.turn_off: relay
      - delay: 15s
      - switch.turn_on: relay

  # Switch to toggle the relay (USB output)
  - platform: gpio
    id: relay2
    name: ${plug_name} USB Switch
    pin: GPIO5
    restore_mode: RESTORE_DEFAULT_ON

output:
  # Relay state led
  - platform: esp8266_pwm
    id: state_led
    pin:
      number: GPIO00
      inverted: true

light:
  # Relay state light
  - platform: monochromatic
    output: state_led
    id: led

# Uses the red LED as a status indicator
status_led:
  pin:
    number: GPIO02
    inverted: true