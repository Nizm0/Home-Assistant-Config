- platform: template
  sensors:
    predicted_print_end_time:
      friendly_name: Ender 3 Predicted End Time
      value_template: >
        {% if is_state("binary_sensor.ender_3_printing", on) and state("sensor.ender_3_time_remaining") > 0  %}
        {{ (as_timestamp(now()) + states.sensor.ender_3_time_remaining.state | float) | timestamp_local }}
        {%- else -%}
        ---NAN---
        {%- endif %}
    battery_status:
      friendly_name: "Battery Status"
      entity_id:
      - input_boolean.battery_status_update
      value_template: >
        {%- set threshold = 20 -%}
        {%- set domains = ['light', 'switch', 'sensor', 'zwave', 'lock'] -%}
        {%- for domain in domains -%}
        {%- for item in states[domain] if ((item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) or ("battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown"))) -%}
        {%- if (item.attributes.battery_level is defined and item.attributes['battery_level'] | int < threshold) -%}
        {{ item.name }} ({{ item.attributes['battery_level'] }}){%- if not loop.last %}, {% endif -%}{% endif -%}
        {%- if "battery" in item.name | lower and ((item.state | int < threshold and item.state|int != 0) or item.state | lower == "low" or item.state | lower == "unknown") -%}
        {{ item.name }} ({{ item.state }}){%- if not loop.last %}, {% endif -%} {% endif -%}
        {%- endfor -%}
        {%- endfor -%}

    vacuum_battery:
      entity_id: vacuum.rockrobo
      friendly_name: "Vacuum - Battery"
      value_template: "{{ states.vacuum.rockrobo.attributes.battery_level }}"
      device_class: battery
      unit_of_measurement: '%'

    vacuum_main_brush:
      entity_id: vacuum.rockrobo
      friendly_name: "Vacuum - Main Brush left"
      value_template: "{{ states.vacuum.rockrobo.attributes.main_brush_left }}"
      # device_class: battery
      # unit_of_measurement: '%'

    vacuum_side_brush:
      entity_id: vacuum.rockrobo
      friendly_name: "Vacuum - Side Brush left"
      value_template: "{{ states.vacuum.rockrobo.attributes.side_brush_left }}"
      # device_class: battery
      # unit_of_measurement: '%'

    vacuum_filter:
      entity_id: vacuum.rockrobo
      friendly_name: "Vacuum - Filter left"
      value_template: "{{ states.vacuum.rockrobo.attributes.filter_left }}"
      # device_class: battery
      # unit_of_measurement: '%'

    vacuum_sensors:
      entity_id: vacuum.rockrobo
      friendly_name: "Vacuum - Sensor dirty left"
      value_template: "{{ states.vacuum.rockrobo.attributes.sensor_dirty_left }}"
      # device_class: battery
      # unit_of_measurement: '%'

    in_bed_bayesian_probability:
      entity_id: binary_sensor.in_bed
      value_template: "{{states.binary_sensor.in_bed.attributes.probability * 100}}"
      unit_of_measurement: '%'

    template_last_motion:
      friendly_name: 'Last Motion'
      value_template: >
        {% set sensors = [states.binary_sensor.living_room_motion_sensor, states.binary_sensor.corridor_motion_sensor] %}
        {% for sensor in sensors %}
          {% if as_timestamp(sensor.last_changed) == as_timestamp(sensors | map(attribute='last_changed') | max) %}
            {{ sensor.name }}
          {% endif %}
        {% endfor %}

    motion_last30:
      value_template: '{{(as_timestamp(now())-as_timestamp(states.variable.last_motion.last_changed)) < 1800 }}'
      friendly_name: Motion in Last 30min
      # device_class: motion

    taking_bath:
      friendly_name: Taking bath
      value_template: > 
        {% if states('sensor.bathroom_humidity') | float > 50 %}
          true
        {%- else -%}
          false
        {%- endif %}

# - platform: template
#   sensors:
#     bedroom_battery_level:
#       friendly_name: "Bedroom room batteries"
#       # entity_id: sensor.bedroom_temperature
#       unit_of_measurement: "%"
#       value_template: "{{states.sensor.bedroom_temperature.attributes.battery_level}}"
#       icon_template: '{% if states.binary_sensor.bedroom_temperature.attributes.battery_level == 100 %}
#                           mdi:battery
#                       {% elif states.binary_sensor.bedroom_temperature.attributes.battery_level >= 90 %}
#                           mdi:battery-90
#                       {% elif states.binary_sensor.bedroom_temperature.attributes.battery_level >= 80 %}
#                           mdi:battery-80
#                       {% elif states.binary_sensor.bedroom_temperature.attributes.battery_level >= 70 %}
#                           mdi:battery-70
#                       {% elif states.binary_sensor.bedroom_temperature.attributes.battery_level >= 60 %}
#                           mdi:battery-60
#                       {% elif states.binary_sensor.bedroom_temperature.attributes.battery_level >= 50 %}
#                           mdi:battery-50
#                       {% elif states.binary_sensor.bedroom_temperature.attributes.battery_level >= 40 %}
#                           mdi:battery-40
#                       {% elif states.binary_sensor.bedroom_temperature.attributes.battery_level >= 30 %}
#                           mdi:battery-30
#                       {% elif states.binary_sensor.bedroom_temperature.attributes.battery_level >= 20 %}
#                           mdi:battery-20
#                       {% elif states.binary_sensor.bedroom_temperature.attributes.battery_level >= 10 %}
#                           mdi:battery-10
#                       {% else %}
#                           mdi:battery-charging-wireless-outline
#                       {% endif %}'