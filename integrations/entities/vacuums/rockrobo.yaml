vacuum:
  - platform: xiaomi_miio
    host: 192.168.1.150
    name: Rockrobo
    token: !secret xiaomi_rockrobo_key

input_boolean:
  ready_to_vacuum:
    name: Flor is ready to vacuum
    icon: mdi:robot-vacuum
    # initial: off
    # restore_state:
  ready_to_emptying_vacuum:
    name: Vacuum needs emptying
    icon: mdi:delete-circle

input_datetime:
  vacuum_day_time:
    name: Vacuum date time
    has_date: false
    has_time: true
    # initial: '15:00'

input_number:
  vacuum_cleaned_area:
    name: Cleared area between emptying
    mode: box
    min: 0
    max: 200

sensor:
  - platform: template
    sensors:
      vacuum_battery:
        entity_id: vacuum.rockrobo
        friendly_name: "Vacuum - Battery"
        value_template: "{{ states.vacuum.rockrobo.attributes.battery_level }}"
        device_class: battery
        unit_of_measurement: '%'

      vacuum_main_brush:
        entity_id: vacuum.rockrobo
        friendly_name: "Vacuum - Main Brush left"
        value_template: "{{ states.vacuum.rockrobo.attributes.main_brush_left }}"
        # device_class: battery
        # unit_of_measurement: '%'

      vacuum_side_brush:
        entity_id: vacuum.rockrobo
        friendly_name: "Vacuum - Side Brush left"
        value_template: "{{ states.vacuum.rockrobo.attributes.side_brush_left }}"
        # device_class: battery
        # unit_of_measurement: '%'

      vacuum_filter:
        entity_id: vacuum.rockrobo
        friendly_name: "Vacuum - Filter left"
        value_template: "{{ states.vacuum.rockrobo.attributes.filter_left }}"
        # device_class: battery
        # unit_of_measurement: '%'

      vacuum_sensors:
        entity_id: vacuum.rockrobo
        friendly_name: "Vacuum - Sensor dirty left"
        value_template: "{{ states.vacuum.rockrobo.attributes.sensor_dirty_left }}"
        # device_class: battery
        # unit_of_measurement: '%'

switch:
  - platform: template
    switches:
      rockrobo_switch:
        entity_id: vacuum.rockrobo
        value_template: "{{ is_state('vacuum.rockrobo', 'cleaning') }}"
        turn_on:
          service: vacuum.start
          data:
            entity_id: vacuum.rockrobo
        turn_off:
          service: vacuum.stop
          data:
            entity_id: vacuum.rockrobo

# automation:
#   - alias: Vacuum monitoring system for sensors
#     id: vacuum_monitoring_system_for_sensors
#     initial_state: 'true'
#     trigger:
#     - platform: template
#       value_template: "{% if is_state_attr('vacuum.rockrobo', 'sensor_dirty_left', 5) %}true{% endif %}"
#     action:
#     - service: todoist.new_task
#       data_template:
#         content: "Clean sensors in vacuum rockrobo"
#         priority: 2
#         due_date_string: 'today'

#   - alias: Vacuum monitoring system for filters
#     id: vacuum_monitoring_system_for_filters
#     initial_state: 'true'
#     trigger:
#     - platform: template
#       value_template: "{% if is_state_attr('vacuum.rockrobo', 'filter_left', 10) %}true{% endif %}"
#     action:
#     - service: todoist.new_task
#       data_template:
#         content: "Replace filter in vacuum rockrobo"
#         priority: 2
#         due_date_string: 'today'

#   - alias: Vacuum monitoring system for brushes
#     id: vacuum_monitoring_system_for_brushes
#     initial_state: 'true'
#     trigger:
#     - platform: template
#       value_template: "{% if is_state_attr('vacuum.rockrobo', 'side_brush_left', 10) %}true{% endif %}"
#     - platform: template
#       value_template: "{% if is_state_attr('vacuum.rockrobo', 'main_brush_left', 10) %}true{% endif %}"
#     action:
#     - service: todoist.new_task
#       data_template:
#         content: "Replace side or main brush in vacuum rockrobo"
#         priority: 2
#         due_date_string: 'today'