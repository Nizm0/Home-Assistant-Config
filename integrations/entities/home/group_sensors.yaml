script:
  create_group_all_motion_sensors:
    sequence:
      - service: group.set
        data_template:
          object_id: "all_sensors_motion"
          # alias: All Motion Sensors
          entities: >
            {{ states.binary_sensor
              | selectattr('attributes.device_class','eq','motion')
              | rejectattr('attributes.friendly_name', 'search', 'Motion in Last')
              | map(attribute='entity_id')
              | join(", ") }}
  create_group_all_windows_sensors:
    sequence:
      - service: group.set
        data_template:
          object_id: "all_sensors_windows"
          # alias: All Winsows Sensors
          entities: >
            {{ states.binary_sensor 
              | selectattr('attributes.device_class','eq','window')
              | map(attribute='entity_id')
              | join(", ") }}
  create_group_all_doors_sensors:
    sequence:
      - service: group.set
        data_template:
          object_id: "all_sensors_doors"
          # alias: All Dors Sensors
          entities: >
            {{ states.binary_sensor
              | selectattr('attributes.device_class','eq','door')
              | map(attribute='entity_id')
              | join(", ") }}
  create_group_all_temperature_sensors:
    sequence:
      - service: group.set
        data_template:
          object_id: "all_sensors_temperature"
          # alias: All Temperature Sensors
          entities: >
            {{ states.sensor
              | selectattr('attributes.device_class','eq','temperature')
              | map(attribute='entity_id')
              | join(", ") }}
  create_group_all_humidity_sensors:
    sequence:
      - service: group.set
        data_template:
          object_id: "all_sensors_humidity"
          # alias: All Humidity Sensors
          entities: >
            {{ states.sensor
              | selectattr('attributes.device_class','eq','humidity')
              | map(attribute='entity_id')
              | join(", ") }}
  create_group_all_lights:
    sequence:
      - service: group.set
        data_template:
          object_id: "all_lights"
          # alias: All Humidity Sensors
          entities: >
            {{ states.light
              | map(attribute='entity_id')
              | join(", ") }}
  create_group_all_power_sensors:
    sequence:
      - service: group.set
        data_template:
          object_id: "all_power_sensors"
          # alias: All Power Sensors
          entities: >
            {{ states.sensor
              | selectattr('attributes.device_class', 'defined')
              | selectattr('attributes.device_class','eq','power')
              | rejectattr('attributes.friendly_name', 'search', 'Battery Power')
              | rejectattr('state', 'in', ['unavailable', 'unknown'])
              | map(attribute='entity_id')
              | join(", ") }}

automation:
  - alias: Startup Stuff - Notifications
    id: 5f28f927-56c7-4867-98fb-7d27d0c6e52d
    trigger:
      - event: start
        platform: homeassistant
    action:
      # - data:
      #     message: HomeAssistant is up
      #   service: telegram_bot.send_message
      - service: script.turn_on
        # alias: Create All Groups
        entity_id:
          - script.create_group_all_motion_sensors
          - script.create_group_all_windows_sensors
          - script.create_group_all_doors_sensors
          - script.create_group_all_temperature_sensors
          - script.create_group_all_humidity_sensors
          - script.create_group_all_power_sensors
          - script.create_group_all_lights

binary_sensor:
  - platform: template
    sensors:
      all_motion_sensors_off:
        friendly_name: "No Motion"
        value_template: "{{ is_state('group.all_sensors_motion', 'on') }}"
        device_class: safety
      all_doors_closed:
        friendly_name: "All Doors Closed"
        value_template: "{{ is_state('group.all_sensors_doors', 'on') }}"
        device_class: safety
      all_windows_closed:
        friendly_name: "All Windows Closed"
        value_template: "{{ is_state('group.all_sensors_windows', 'on') }}"
        device_class: safety
      all_lights_off:
        friendly_name: "All Lights Off"
        value_template: "{{ is_state('group.all_sensors_windows', 'off') }}"
        device_class: light
